import React, { useEffect, useState } from "react";
import { Navigate } from "react-router-dom";
import PropTypes from "prop-types";

const ProtectedRoute = ({ children, requiredRole }) => {
  const [token, setToken] = useState(null);
  const [isLoading, setIsLoading] = useState(true); // Add loading state

  useEffect(() => {
    const checkToken = () => {
      const t = localStorage.getItem("token");
      console.log("Token from localStorage:", t); // Debug log
      setToken(t);
      setIsLoading(false); // Set loading to false after checking
    };

    checkToken();
  }, []); // Only run once on mount

  // Show loading state while checking token
  if (isLoading) {
    return <div>Loading...</div>; // Or your loading component
  }

  // Check if token exists and is not empty
  if (!token || token === "null" || token === "undefined") {
    console.log("No valid token, redirecting to login"); // Debug log
    return <Navigate to="/kirish" replace />;
  }

   if (requiredRole && userRole !== requiredRole) {
    return <Navigate to="/kabinet" replace />;
  }

  return children;
};

ProtectedRoute.propTypes = {
  children: PropTypes.node.isRequired,
  requiredRole: PropTypes.string,

};

export default ProtectedRoute;